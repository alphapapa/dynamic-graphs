* Dynamic graphs in emacs

** Motivations
While it takes only few lines to make a graph in graph file language,
it takes more effort to make it visually aligned with the rest of its
presentation.

For me, the best way is to separate graph definition in a .gv file
from definition of fonts, colors etc that can be kept in a .gvpr
file that can be used as a style file.

Second motivations are big graphs. Graphviz does nice job of
presenting them as whole, but in many case I want to be able to zoom
near some particular node (original motivation was displaying close
nodes in linked org files).

** What this package does
Make dynamic graphs: take a graph, apply some filters, and display
it as an image. The graph can be either a function that inserts the
graph (and is called for each redisplay), or a buffer that can
change. An imap file is created in addition to the image so that
clicks on image can be related to individual nodes (TODO: only for
rectangles so far)

** Filters
 The filters can apply both enhancing operations (add colors, ...)
 and more complicated operations coded in gvpr. As a special case
 there is a filter that removes all nodes that are more distant than
 a parameter from a root node.

 See docstring for ~dynamic-graphs-filters~ for details about filters

** Key bindings
 The image is displayed with a specialized minor mode.
 Predefined key bindings on the displayed image in this mode include:
 - e (dynamic-graphs-set-engine) change grahviz engine (dot, circo, ...)
 - c (dynamic-graphs-remove-cycles) change whether cycles are removed
 - 1-9 (dynamic-graphs-zoom-by-key) set maximum displayed distance from a root node
 - mouse-1 (dynamic-graphs-handle-click) follow link defined in imap
   file - that is, in URL attribute of the node. Link is followed by
   org-link-open-from-string, which is the only actual commection to
   the org mode
 - S-mouse-1 (dynamic-graphs-shift-focus) if the link for node is
   id:<node name>, extract node name and make it a new
   root. Predefined filter ~node-refs~ set hrefs in such way. This
   simplifies things when nodes relate to org mode items, but
   actually does not make much sense otherwise.

** Example
Run
 #+begin_src elisp
 (dynamic-graphs-display-graph "test" nil
		    (lambda ()
		      (insert "digraph Gr {A [URL=\"http://example.com\"] A -> B -> C -> A ->E->F->G}"))
		    '(2 "N {style=\"filled\",fillcolor=\"lightgreen\"}"
                       node-refs boxize default))
 #+end_src

and you will get an image with the full graph:
[[./images/full.png]]

Click on "A" box to open the example.com website from url.

Press `e n' to switch to neato engine:

[[./images/neato.png]]

Shift-click over box F to show it and nodes connected to it (radius 2
as in the filter list above). The ~default~ filter causes the root node
to be highlighter in yellow.


[[./images/F-around.png]]


Press 3 to increase radius for displayed nodes and display node A as
well:

[[./images/f-and-one.png]]
