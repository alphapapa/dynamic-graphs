* Dynamic graphs in emacs
Make dynamic graphs: take a graph, apply some filters, and display
it as an image. The graph can be either a function that inserts the
graph (and is called for each redisplay), or a buffer that can
change. An imap file is created in addition to the image so that
clicks on image can be related to individual nodes (TODO: only for
rectangles so far)

** Filters
 The filters can apply both enhancing operations (add colors, ...)
 and more complicated operations coded in gvpr. As a special case
 there is a filter that removes all nodes that are more distant than
 a parameter from a root node.

 See docstring for `org-graphs-filters' for details about filters

** Key bindings
 The image is displayed with a specialized minor mode.
 Predefined key bindings on the displayed image in this mode include:
 - e (org-graphs-set-engine) change grahviz engine (dot, circo, ...)
 - c (org-graphs-remove-cycles) change whether cycles are removed
 - 1-9 (org-graphs-zoom-by-key) set maximum displayed distance from a root node
 - mouse-1 (org-graphs-handle-click) follow link defined in imap
   file - that is, in URL attribute of the node. Link is followed by
   org-link-open-from-string, which is the only actual commection to
   the org mode
 - S-mouse-1 (org-graphs-shift-focus) if the link for node is
   id:<node name>, extract node name and make it a new
   root. Predefined filter `node-refs' set hrefs in such way. This
   simplifies things when nodes relate to org mode items, but
   actually does not make much sense otherwise.

** Example
Run
 #+begin_src elisp
 (org-graphs-display-graph "test" nil
		    (lambda ()
		      (insert "digraph Gr {A [URL=\"http://example.com\"] A->B B->C C->A A->E->F->G}"))
		    '(2 remove-cycles "N {style=\"filled\",fillcolor=\"lightgreen\"}"
                   node-refs boxize))
 #+end_src

and you will get an image with the full graph:
[[./images/full.png]]

Click on "A" box to open the example.com website from url.

Shift-click over box F to get this:
[[./images/F-around.png]]

Press 3 to show additional nodes:
